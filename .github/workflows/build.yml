name: Build/release
on: push
jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [macos-latest, ubuntu-latest, windows-latest]
        #os: [windows-latest]
        os: [macos-latest] #we could use macos-13 here to get an x64 ffmpeg exe but see further....
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # - name: Cache node modules
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-

      # - name: Retry failed step
      #   uses: nick-fields/retry@v2
      #   with:
      #     timeout_minutes: 5
      #     max_attempts: 3
      #     command: npm i --verbose --no-optional
      #     shell: bash

      - name: Install Dependencies
        run: npm install --verbose
        timeout-minutes: 30
        shell: bash

     # introduce a delay to help nod7z-archive build (prob defunct as we manually install later)
      - name: delay
        run: sleep 10
        shell: bash

      - name: delete canvas #https://github.com/mozilla/pdf.js/issues/15652
        run: rm -rf node_modules/canvas
        shell: bash

      - name: run build on node7z-archive
        run: cd node_modules/node-7z-archive && node installer.mjs && cd ../..
        shell: bash

      - name: Set electron-builder architecture for macOS
        if: matrix.os == 'macos-latest'
        run: |
          echo "ELECTRON_BUILDER_ARCH=x64" >> $GITHUB_ENV
        shell: bash

      - name: Build/release Electron app for non-macOS
        if: matrix.os != 'macos-latest'
        uses: johannesjo/action-electron-builder@v1
        with:
          skip_install: true
          # args: "--config.win.portable=true"
          github_token: ${{ secrets.github_token }}
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Set permissions for macOS
        if: matrix.os == 'macos-latest'
        run: |
          chmod +r node_modules/node-unar/lsar node_modules/node-unar/unar
         # npx electron-builder --mac --x64 --publish=${{ startsWith(github.ref, 'refs/tags/v') && 'always' || 'never' }}
        shell: bash
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.github_token }}

      # thanks https://github.com/eugeneware/ffmpeg-static/issues/35#issuecomment-2315640401
      - name: Create universal ffmpeg binaries for macOS
        if: startsWith(matrix.os, 'macos')
        # Currently, the ffmpeg-static binaries are not universal (Not
        # their fault, we thank them for their useful package, the issue
        # is that there don't seem to be well known upstream sources that
        # provide a universal binary).
        #
        # As a workaround, we invoke ffmpeg-static twice to download both
        # the Intel and ARM binaries, and combine them into a single
        # universal binary using lipo.
        #
        # Note that the yarn install will run again, as part of the
        # "build:ci" step, so we're relying on ffmpeg-static install.js's
        # behaviour of not overwriting the existing file named `ffmpeg`.
        run: |
          rm -rf node_modules/ffmpeg-static
          npm_config_arch=arm64 npm install ffmpeg-static
          mv node_modules/ffmpeg-static/ffmpeg node_modules/ffmpeg-arm64
          ls node_modules/ffmpeg-arm64  # print what we ended up with
          rm -rf node_modules/ffmpeg-static
          npm_config_arch=x64 npm install ffmpeg-static
          mv node_modules/ffmpeg-static/ffmpeg node_modules/ffmpeg-x64
          ls node_modules/ffmpeg-x64  # print what we ended up with
          lipo -create node_modules/ffmpeg-arm64 node_modules/ffmpeg-x64 -output node_modules/ffmpeg-static/ffmpeg
          rm ffmpeg-arm64 ffmpeg-x64
          file node_modules/ffmpeg-static/ffmpeg  # print what we ended up with

      - name: Build/release Electron app for macOS
        if: matrix.os == 'macos-latest'
        uses: johannesjo/action-electron-builder@v1
        with:
          skip_install: true
          # args: "--config.win.portable=true"
          args: "--mac --x64"
          github_token: ${{ secrets.github_token }}
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false 