name: Build/release
on: push
jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [macos-latest, ubuntu-latest, windows-latest]
        #os: [windows-latest]
        os: [macos-latest, windows-latest] #we could use macos-13 here to get an x64 ffmpeg exe but see further....
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 #can you read this from the package.json or similar!

      - name: Install Dependencies
        run: npm install --verbose
        timeout-minutes: 30
        shell: bash

      - name: delete canvas #https://github.com/mozilla/pdf.js/issues/15652
        run: rm -rf node_modules/canvas
        shell: bash

      - name: run build on node7z-archive
        run: cd node_modules/node-7z-archive && node installer.mjs && cd ../..
        shell: bash

      - name: Set electron-builder architecture for macOS
        if: matrix.os == 'macos-latest'
        run: |
          echo "ELECTRON_BUILDER_ARCH=x64" >> $GITHUB_ENV
        shell: bash

      - name: Build/release Electron app for non-macOS
        if: matrix.os != 'macos-latest'
        uses: johannesjo/action-electron-builder@v1
        with:
          skip_install: true
          # args: "--config.win.portable=true"
          github_token: ${{ secrets.github_token }}
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Set permissions for macOS
        if: matrix.os == 'macos-latest'
        run: |
          chmod +r node_modules/node-unar/lsar node_modules/node-unar/unar
         # npx electron-builder --mac --x64 --publish=${{ startsWith(github.ref, 'refs/tags/v') && 'always' || 'never' }}
        shell: bash
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.github_token }}

      # ATM i'm looking for an intel mac build, I COULD have done a build for macos-13 to get a non-arm ffmpeg binary, but where's the future proofing
      # so thanks https://github.com/eugeneware/ffmpeg-static/issues/35#issuecomment-2315640401
      - name: Create universal ffmpeg binaries for macOS
        if: startsWith(matrix.os, 'macos')
        # Currently, the ffmpeg-static binaries are not universal, there don't seem to be well known upstream sources that provide a universal binary
        # As a workaround, invoke ffmpeg-static install again, after the arm binary has built, to build the x64 binary amd combine into universal binary using lipo
        # Manav's initial solution used yarn, which plays havoc with npm, instead just rebuild once with npm
        # this does make the ffmpeg binary much larger than it needs to be however, so are we making 2 builds or not?
        run: |
          mv node_modules/ffmpeg-static/ffmpeg{,-arm64}
          npm_config_arch=x64 npm rebuild --cpu x64 -f ffmpeg-static && mv node_modules/ffmpeg-static/ffmpeg{,-x64}
          cd node_modules/ffmpeg-static
          lipo -create ffmpeg-arm64 ffmpeg-x64 -output ffmpeg
          rm ffmpeg-arm64 ffmpeg-x64
          file ffmpeg  # print what we ended up with

      - name: Build/release Electron app for macOS
        if: matrix.os == 'macos-latest'
        uses: johannesjo/action-electron-builder@v1
        with:
          skip_install: true
          args: "--mac --x64"
          github_token: ${{ secrets.github_token }}
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false 